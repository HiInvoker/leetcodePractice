
Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its minimum depth = 2.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


#非递归
class Solution:
    def minDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if root == None:
            return 0
        else:
            queue = [root]

            count = 0
            while queue:
                count += 1
                flag = 0
                old, queue = queue, []

                for item in old:
                    if item.left == None and item.right == None:
                        flag = 1
                        break
                    elif item.left == None and item.right:
                        queue += [item.right]
                    elif item.left and item.right == None:
                        queue += [item.left]
                    else:
                        queue += [item.left, item.right]
                if flag:
                    break
            return count
