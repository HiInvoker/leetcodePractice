110. Balanced Binary Tree

Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example 1:

Given the following tree [3,9,20,null,null,15,7]:
    3
   / \
  9  20
 /  \
15   7
Return true.


Example 2:

Given the following tree [1,2,2,3,3,null,null,4,4]:

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
Return false.


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


class Solution:
    def maxDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if (root == None):
            return 0
        else:
            left = self.maxDepth(root.left)
            right = self.maxDepth(root.right)
            return max(left, right) + 1

    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if root == None:    #没有节点或者节点的左右子树高度分别为0 1 或者1 0 才行 判断高度用之前的函数解决
            return True
        left = self.maxDepth(root.left)
        right = self.maxDepth(root.right)
        if (left == 0 and right == 1) or (left == 1 and right == 0):
            return True
        while root:
            left = self.maxDepth(root.left)
            right = self.maxDepth(root.right)

            if abs(left - right) > 1:
                return False
            else:
                return self.isBalanced(root.left) and self.isBalanced(root.right)
