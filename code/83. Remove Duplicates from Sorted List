Given a sorted linked list, delete all duplicates such that each element appear only once.

Input: 1->1->2
Output: 1->2

Input: 1->1->2->3->3
Output: 1->2->3

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def deleteDuplicates(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """

        pre = head
        cur = head

        if cur: #如果head就是空，那就直接返回了
            cur = cur.next
            while cur:
                if cur.val != pre.val:
                    pre.next = cur
                    pre = cur
                cur = cur.next
            pre.next = None  #去掉尾部多余部分
        return head

#如果不同，才连起来
#双指针法
