Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3

But the following [1,2,2,null,3,null,3] is not:

    1
   / \
  2   2
   \   \
    3    3

Bonus points if you could solve it both recursively and iteratively.


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """

        queue = [root]
        while queue:
            oldq, queue = queue, []
            #一次直接处理一层的节点

            level = [item.val if item else 'x' for item in oldq]
            #取得这一层节点的值

            if level != level[::-1]: #不对称
                return False

            for item in oldq:
                if item: #非空节点
                    queue.append(item.left)
                    queue.append(item.right)
        return True
