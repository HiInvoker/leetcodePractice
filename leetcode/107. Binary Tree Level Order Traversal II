Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def levelOrderBottom(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """

        lst = []

        queue = [root]

        while queue:
            old, queue = queue, []

            level = []
            
            for item in old:
                if item:
                    if item.val != 'x':
                        level.append(item.val)

            lst.append(level)

            for item in old:
                if item:
                    queue.append(item.left)
                    queue.append(item.right)
        return lst[::-1][1:]
