Given two binary trees, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical and the nodes have the same value.

Input:     1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

Output: true

Input:     1         1
          /           \
         2             2

        [1,2],     [1,null,2]

Output: false

Input:     1         1
          / \       / \
         2   1     1   2

        [1,2,1],   [1,1,2]

Output: false

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isSameTree(self, p, q):
        """
        :type p: TreeNode
        :type q: TreeNode
        :rtype: bool
        """
        if (q == None and p == None):
            return True
        elif (p != None and q == None):
            return False
        elif (p == None and q != None):
            return False
        else:
            if p.val != q.val:
                return False
            else:
                return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)

#非递归

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isSameTree(self, p, q):
        """
        :type p: TreeNode
        :type q: TreeNode
        :rtype: bool
        """

        if (q == None and p == None):
            return True
        elif (p != None and q == None):
            return False
        elif (p == None and q != None):
            return False
        else:
            left = [p]
            right = [q]

            while left and right:
                oldl, left = left, []
                oldr, right = right, []

                levell = [item.val if item else 'x' for item in oldl]
                levelr = [item.val if item else 'x' for item in oldr]

                if levelr != levell:
                    return False

                for item in oldl:
                    if item:
                        left.append(item.left)
                        left.append(item.right)

                for item in oldr:
                    if item:
                        right.append(item.left)
                        right.append(item.right)
            return True
